package templates

import "github.com/go-go-golems/jesus/pkg/engine"
import "fmt"

templ AdminPage(logs []engine.RequestLog, total int, limit, offset int) {
	@BaseLayout("Admin") {
		<div class="row">
			<div class="col-12">
				<div class="card">
					<div class="card-header">
						<div class="row align-items-center">
							<div class="col">
								<h5 class="mb-0">
									<i class="bi bi-gear"></i>
									Request Logs
								</h5>
							</div>
							<div class="col-auto">
								<div class="text-muted">
									{ fmt.Sprintf("%d total requests", total) }
								</div>
							</div>
						</div>
					</div>
					
					<!-- Filters -->
					<div class="card-body border-bottom">
						<form method="GET" action="/admin/logs">
							<div class="row g-3">
								<div class="col-md-3">
									<label for="method" class="form-label">Method</label>
									<select class="form-select" id="method" name="method">
										<option value="">All Methods</option>
										<option value="GET">GET</option>
										<option value="POST">POST</option>
										<option value="PUT">PUT</option>
										<option value="DELETE">DELETE</option>
									</select>
								</div>
								<div class="col-md-4">
									<label for="path" class="form-label">Path Filter</label>
									<input type="text" class="form-control" id="path" name="path" placeholder="Filter by path..."/>
								</div>
								<div class="col-md-2">
									<label for="status" class="form-label">Status</label>
									<select class="form-select" id="status" name="status">
										<option value="">All Status</option>
										<option value="200">200 OK</option>
										<option value="404">404 Not Found</option>
										<option value="500">500 Error</option>
									</select>
								</div>
								<div class="col-md-3">
									<label class="form-label">&nbsp;</label>
									<div class="d-flex gap-2">
										<button type="submit" class="btn btn-primary">
											<i class="bi bi-search"></i>
											Filter
										</button>
										<a href="/admin/logs" class="btn btn-outline-secondary">
											<i class="bi bi-arrow-clockwise"></i>
											Refresh
										</a>
									</div>
								</div>
							</div>
						</form>
					</div>
					
					<!-- Request List -->
					<div class="list-group list-group-flush">
						if len(logs) == 0 {
							<div class="list-group-item text-center py-5">
								<i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
								<div class="text-muted mt-2">No requests found</div>
							</div>
						}
						
						for _, log := range logs {
							@RequestLogItem(log)
						}
					</div>
					
					<!-- Pagination -->
					if total > limit {
						@AdminPagination(total, limit, offset, "/admin/logs")
					}
				</div>
			</div>
		</div>
		
		<!-- Stats Cards -->
		<div class="row mt-4">
			<div class="col-md-3">
				<div class="card bg-primary text-white">
					<div class="card-body">
						<div class="d-flex justify-content-between">
							<div>
								<h6 class="card-title">Total Requests</h6>
								<h3 class="mb-0">{ fmt.Sprintf("%d", total) }</h3>
							</div>
							<div class="align-self-center">
								<i class="bi bi-bar-chart fs-1"></i>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="card bg-success text-white">
					<div class="card-body">
						<div class="d-flex justify-content-between">
							<div>
								<h6 class="card-title">Success Rate</h6>
								<h3 class="mb-0">{ fmt.Sprintf("%.1f%%", calculateSuccessRate(logs)) }</h3>
							</div>
							<div class="align-self-center">
								<i class="bi bi-check-circle fs-1"></i>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="card bg-info text-white">
					<div class="card-body">
						<div class="d-flex justify-content-between">
							<div>
								<h6 class="card-title">Avg Response</h6>
								<h3 class="mb-0">{ fmt.Sprintf("%.0fms", calculateAvgResponseTime(logs)) }</h3>
							</div>
							<div class="align-self-center">
								<i class="bi bi-speedometer2 fs-1"></i>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				<div class="card bg-warning text-dark">
					<div class="card-body">
						<div class="d-flex justify-content-between">
							<div>
								<h6 class="card-title">Errors</h6>
								<h3 class="mb-0">{ fmt.Sprintf("%d", countErrors(logs)) }</h3>
							</div>
							<div class="align-self-center">
								<i class="bi bi-exclamation-triangle fs-1"></i>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ RequestLogItem(log engine.RequestLog) {
	<div class="list-group-item">
		<div class="row align-items-center">
			<div class="col-auto">
				<span class={ fmt.Sprintf("badge %s", getStatusBadgeClass(log.Status)) }>
					{ fmt.Sprintf("%d", log.Status) }
				</span>
			</div>
			<div class="col-auto">
				<span class={ fmt.Sprintf("badge %s", getMethodBadgeClass(log.Method)) }>
					{ log.Method }
				</span>
			</div>
			<div class="col">
				<div class="d-flex justify-content-between align-items-center">
					<div>
						<strong>{ log.Path }</strong>
						if log.RemoteIP != "" {
							<br/>
							<small class="text-muted">{ log.RemoteIP }</small>
						}
					</div>
					<div class="text-end">
						<div class="text-muted small">{ log.StartTime.Format("15:04:05") }</div>
						if log.Duration > 0 {
							<div class="text-muted small">{ fmt.Sprintf("%.2fms", float64(log.Duration.Nanoseconds())/1000000) }</div>
						}
					</div>
				</div>
			</div>
		</div>
		
		if log.Error != "" {
			<div class="mt-2">
				<div class="alert alert-danger py-2 mb-0">
					<small><strong>Error:</strong> { log.Error }</small>
				</div>
			</div>
		}
		
		if log.Response != "" && len(log.Response) < 200 {
			<div class="mt-2">
				<small class="text-muted">Response:</small>
				<pre class="bg-light p-2 rounded small mb-0"><code>{ log.Response }</code></pre>
			</div>
		}
	</div>
}

templ AdminPagination(total, limit, offset int, baseURL string) {
	<div class="card-footer">
		<nav>
			<ul class="pagination justify-content-center mb-0">
				<!-- Previous -->
				if offset > 0 {
					<li class="page-item">
						<a class="page-link" href={ templ.URL(fmt.Sprintf("%s?limit=%d&offset=%d", baseURL, limit, offset-limit)) }>
							<i class="bi bi-chevron-left"></i>
							Previous
						</a>
					</li>
				} else {
					<li class="page-item disabled">
						<span class="page-link">
							<i class="bi bi-chevron-left"></i>
							Previous
						</span>
					</li>
				}
				
				<!-- Page Info -->
				<li class="page-item disabled">
					<span class="page-link">
						{ fmt.Sprintf("Showing %d-%d of %d", offset+1, min(offset+limit, total), total) }
					</span>
				</li>
				
				<!-- Next -->
				if offset+limit < total {
					<li class="page-item">
						<a class="page-link" href={ templ.URL(fmt.Sprintf("%s?limit=%d&offset=%d", baseURL, limit, offset+limit)) }>
							Next
							<i class="bi bi-chevron-right"></i>
						</a>
					</li>
				} else {
					<li class="page-item disabled">
						<span class="page-link">
							Next
							<i class="bi bi-chevron-right"></i>
						</span>
					</li>
				}
			</ul>
		</nav>
	</div>
}

func getStatusBadgeClass(status int) string {
	if status >= 200 && status < 300 {
		return "bg-success"
	} else if status >= 300 && status < 400 {
		return "bg-info"
	} else if status >= 400 && status < 500 {
		return "bg-warning"
	} else {
		return "bg-danger"
	}
}

func getMethodBadgeClass(method string) string {
	switch method {
	case "GET":
		return "bg-primary"
	case "POST":
		return "bg-success"
	case "PUT":
		return "bg-warning"
	case "DELETE":
		return "bg-danger"
	default:
		return "bg-secondary"
	}
}

func calculateSuccessRate(logs []engine.RequestLog) float64 {
	if len(logs) == 0 {
		return 0
	}
	
	successful := 0
	for _, log := range logs {
		if log.Status >= 200 && log.Status < 400 {
			successful++
		}
	}
	
	return float64(successful) / float64(len(logs)) * 100
}

func calculateAvgResponseTime(logs []engine.RequestLog) float64 {
	if len(logs) == 0 {
		return 0
	}
	
	total := int64(0)
	count := 0
	
	for _, log := range logs {
		if log.Duration > 0 {
			total += log.Duration.Nanoseconds()
			count++
		}
	}
	
	if count == 0 {
		return 0
	}
	
	return float64(total) / float64(count) / 1000000 // Convert to milliseconds
}

func countErrors(logs []engine.RequestLog) int {
	count := 0
	for _, log := range logs {
		if log.Status >= 400 || log.Error != "" {
			count++
		}
	}
	return count
}
